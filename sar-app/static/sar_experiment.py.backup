import numpy as np
import h5py
import time, datetime
import json
from constants import *
from parameters import *
from bson.objectid import ObjectId
from bson import json_util
import threading, atexit

import os
import sys

sys.path.append('/home/Documents/sarapi/api')
sys.path.append('/home/Documents/sarapi/common')

import vna, rail
import db

class sar_experiment(threading.Thread):
    def __init__(self, collection_name, xi, xf, fi, ff, nfre, ptx, ifbw, angle):
        threading.Thread.__init__(self)
        self.collection_name = collection_name
        self.xi = xi
        self.xf = xf
        self.fi = fi
        self.ff = ff
        self.nfre = nfre
        self.ptx = ptx
        self.ifbw = ifbw
        self.angle = angle

        self.xi = int(self.xi * METERS_TO_STEPS_FACTOR)
        self.xf = int(self.xf * METERS_TO_STEPS_FACTOR)
        self.dx = int((c0  / (4.0 * self.ff * 1E9)) * METERS_TO_STEPS_FACTOR) * (180.0 / angle)
        self.npos = int(((self.xf - self.xi) / self.dx) + 1.0)
        self.xf = self.xi + self.dx * (self.npos - 1)
        self.stop_flag = False

    def run(self):
        vector_network_analyzer = vna_api.vnaClient()
        vector_network_analyzer.connect()
        vector_network_analyzer.send_ifbw(self.ifbw)
        vector_network_analyzer.send_number_points(self.nfre)
        vector_network_analyzer.send_freq_start(freq_start = self.fi)
        vector_network_analyzer.send_freq_stop(freq_stop = self.ff)
        vector_network_analyzer.send_power(self.ptx)
        vector_network_analyzer.send_select_instrument()
        vector_network_analyzer.send_cfg()
        time.sleep(5)

        rail = rail_api.railClient()
        rail.connect()
        rail.send_zero_position()

        client = MongoClient()
        db = client.sar_database

        experiment_path = data_path + self.collection_name
        os.mkdir(experiment_path)
        data_take = 1

        sar_collection = db[self.collection_name]

        post = {"name": str(self.collection_name),
                "start_position": str(self.xi / METERS_TO_STEPS_FACTOR),
                "stop_position": str(self.xf / METERS_TO_STEPS_FACTOR),
                "nposition": str(self.npos),
                "delta_position": str(self.dx / METERS_TO_STEPS_FACTOR),
                "start_freq": str(self.fi * 1E9),
                "stop_freq": str(self.ff * 1E9),
                "nfreq": str(self.nfre),
                "is_published": "no",
                "type": "parameters"}
        sar_collection.insert(post)
        post = None

        while True:
            if not self.xi == 0:
                rail.send_move(self.xi, 'R')
                time.sleep(2)

            dataset_name = 'dset' + '_' + str(data_take) + '_' + str(0)
            file_name = '/' + dataset_name + '.hdf5'
            f = h5py.File(experiment_path + file_name, 'w')
            dset = f.create_dataset('sar_dataset', (1, nfre), dtype = np.complex64)
            data = vector_network_analyzer.send_sweep()
            dset[:] = data
            f.close()

            print "Data take: %d, position number: %d" %(data_take, 0)

        	post = {"name": str(self.collection_name),
                    "take_number": str(data_take),
            	    "position": str(0),
                	"datetime": json.dumps(date_time, default = json_util.default),
    	            "data_path": experiment_path + file_name,
                    "is_published": "no",
                    "type": "data"}
        	sar_collection.insert(post)
            post = None

            for j in range(1, self.npos):
                if self.stop_flag:
                    rail.close()
                    vector_network_analyzer.close()
                    break

                rail.send_move(self.dx, 'R')
                time.sleep(2)

                dataset_name = 'dset' + '_' + str(data_take) + '_' + str(j)
                file_name = '/' + dataset_name + '.hdf5'
                f = h5py.File(experiment_path + file_name, 'w')
                dset = f.create_dataset('sar_dataset', (1, nfre), dtype = np.complex64)
                data = vector_network_analyzer.send_sweep()
                dset[:] = data
                f.close()

                print "Data take: %d, position number: %d" %(data_take, j)

                post = {"name": str(self.collection_name),
    		            "take_number": str(data_take),
                        "position": str(j),
                        "datetime": json.dumps(date_time, default = json_util.default),
                        "data_path": experiment_path + file_name,
                        "is_published": "no",
                        "type": "data"}
                sar_collection.insert(post)
                post = None

            if self.stop_flag:
                print "bye"
                f.close()
                vector_network_analyzer.close()
                rail.close()
                break

    	    f.close()
            rail.send_zero_position()
            data_take = data_take + 1

    def stop(self):
        self.stop_flag = True
